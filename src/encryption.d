module Co3mu.Encryption;

import std.stdio, std.string, deimos.openssl.dh, deimos.openssl.cast_, deimos.openssl.bn, std.random, Co3mu.PacketBuilding, std.conv;

public abstract class BaseEncryption {
	public ubyte[] doDecrypt(ubyte[] data, int len);
	public ubyte[] doEncrypt(ubyte[] data, int len);
}

public class GameEncryption : BaseEncryption {
	private CAST_KEY currentKey;
	private DH key_exchange;
	private int encNum, decNum;
	private ubyte[8] encIV;
	private ubyte[8] decIV;
	this() { 
		CAST_set_key(&currentKey, 16, cast(ubyte*)"BC234xs45nme7HU9");
		resetIVs();
		key_exchange = *DH_new();
		BIGNUM* P = BN_new();
		BIGNUM* G = BN_new();
		string Pstr = "E7A69EBDF105F2A6BBDEAD7E798F76A209AD73FB466431E2E7352ED262F8C558F10BEFEA977DE9E21DCEE9B04D245F300ECCBBA03E72630556D011023F9E857F";
		string Gstr = "05";
		BN_hex2bn(&P, Pstr.toStringz());
		BN_hex2bn(&G, Gstr.toStringz());
		key_exchange.p = P;
		key_exchange.g = G;
		DH_generate_key(&key_exchange);
	}
	
	public ubyte[] generateServerPack() {
		int ra = uniform(0,10000);
		string Pstr = "E7A69EBDF105F2A6BBDEAD7E798F76A209AD73FB466431E2E7352ED262F8C558F10BEFEA977DE9E21DCEE9B04D245F300ECCBBA03E72630556D011023F9E857F";
		string Gstr = "05";
		int Size = cast(int)(47 + Pstr.length + 128 + 12 + 8 + 8 + Gstr.length);
		writefln("%s", Size);
		PacketBuilder pb = new PacketBuilder();
		pb.putInt(ra);//0-3
		pb.putInt(ra);//4-7
		pb.putByte(1);//8
		pb.putShort(4940);//9-10
		pb.putInt(Size-11);//11-14
		pb.putInt(12);//15-18
		pb.putInt(ra);//19-22
		pb.putInt(ra);//23-26
		pb.putInt(ra);//27-30
		pb.putInt(8);//31-34 clientivlen
		pb.putInt(0); pb.putInt(0); //35-42 client iv (0)
		pb.putInt(8);//43-46 serverivlen
		pb.putInt(0); pb.putInt(0); //47-54 server iv (0)
		pb.putInt(cast(uint)Pstr.length);//55-59
		pb.putString(Pstr);
		pb.putInt(cast(uint)Gstr.length);
		foreach(char c; Gstr)
			pb.putByte(cast(ubyte)c);
		pb.putInt(128);
		char * keyArr = BN_bn2hex(key_exchange.pub_key);
		pb.putString(to!string(keyArr));
		return pb.sealTQ();
	}
	public void resetIVs() {
		for(int i=0; i<8; i++) {
			encIV[i] = 0;
			decIV[i] = 0;
		}
		encNum = 0;
		decNum = 0;
	}
	public void completeDH(string key) {
		BIGNUM* pub_key = BN_new();
		BN_hex2bn(&pub_key, key.toStringz());
		ubyte[] newKey = new ubyte[128];
		DH_compute_key(newKey.ptr, pub_key, &key_exchange);
		CAST_set_key(&currentKey,128,newKey.ptr);
		resetIVs();
	}
	 public ubyte[] doDecrypt(ubyte[] data, int len) {
	 	ubyte[] retVal = new ubyte[len];
	 	CAST_cfb64_encrypt(data.ptr, retVal.ptr, len, &currentKey, decIV.ptr, &decNum, 0);
	 	return retVal;
	 }
	 public ubyte[] doEncrypt(ubyte[] data, int len) {
	 	ubyte[] retVal = new ubyte[len];
	 	CAST_cfb64_encrypt(data.ptr, retVal.ptr, len, &currentKey, encIV.ptr, &encNum, 1);
	 	return retVal;
	 }
}

public class AuthEncryption : BaseEncryption {
	const ubyte[] ServerK1 = cast(ubyte[])[
	0x9D, 0x90, 0x83, 0x8A, 0xD1, 0x8C, 0xE7, 0xF6, 0x25, 0x28, 0xEB, 0x82, 0x99, 0x64, 0x8F, 0x2E,
	0x2D, 0x40, 0xD3, 0xFA, 0xE1, 0xBC, 0xB7, 0xE6, 0xB5, 0xD8, 0x3B, 0xF2, 0xA9, 0x94, 0x5F, 0x1E,
	0xBD, 0xF0, 0x23, 0x6A, 0xF1, 0xEC, 0x87, 0xD6, 0x45, 0x88, 0x8B, 0x62, 0xB9, 0xC4, 0x2F, 0x0E,
	0x4D, 0xA0, 0x73, 0xDA, 0x01, 0x1C, 0x57, 0xC6, 0xD5, 0x38, 0xDB, 0xD2, 0xC9, 0xF4, 0xFF, 0xFE,
	0xDD, 0x50, 0xC3, 0x4A, 0x11, 0x4C, 0x27, 0xB6, 0x65, 0xE8, 0x2B, 0x42, 0xD9, 0x24, 0xCF, 0xEE,
	0x6D, 0x00, 0x13, 0xBA, 0x21, 0x7C, 0xF7, 0xA6, 0xF5, 0x98, 0x7B, 0xB2, 0xE9, 0x54, 0x9F, 0xDE,
	0xFD, 0xB0, 0x63, 0x2A, 0x31, 0xAC, 0xC7, 0x96, 0x85, 0x48, 0xCB, 0x22, 0xF9, 0x84, 0x6F, 0xCE,
	0x8D, 0x60, 0xB3, 0x9A, 0x41, 0xDC, 0x97, 0x86, 0x15, 0xF8, 0x1B, 0x92, 0x09, 0xB4, 0x3F, 0xBE,
	0x1D, 0x10, 0x03, 0x0A, 0x51, 0x0C, 0x67, 0x76, 0xA5, 0xA8, 0x6B, 0x02, 0x19, 0xE4, 0x0F, 0xAE,
	0xAD, 0xC0, 0x53, 0x7A, 0x61, 0x3C, 0x37, 0x66, 0x35, 0x58, 0xBB, 0x72, 0x29, 0x14, 0xDF, 0x9E,
	0x3D, 0x70, 0xA3, 0xEA, 0x71, 0x6C, 0x07, 0x56, 0xC5, 0x08, 0x0B, 0xE2, 0x39, 0x44, 0xAF, 0x8E,
	0xCD, 0x20, 0xF3, 0x5A, 0x81, 0x9C, 0xD7, 0x46, 0x55, 0xB8, 0x5B, 0x52, 0x49, 0x74, 0x7F, 0x7E,
	0x5D, 0xD0, 0x43, 0xCA, 0x91, 0xCC, 0xA7, 0x36, 0xE5, 0x68, 0xAB, 0xC2, 0x59, 0xA4, 0x4F, 0x6E,
	0xED, 0x80, 0x93, 0x3A, 0xA1, 0xFC, 0x77, 0x26, 0x75, 0x18, 0xFB, 0x32, 0x69, 0xD4, 0x1F, 0x5E,
	0x7D, 0x30, 0xE3, 0xAA, 0xB1, 0x2C, 0x47, 0x16, 0x05, 0xC8, 0x4B, 0xA2, 0x79, 0x04, 0xEF, 0x4E,
	0x0D, 0xE0, 0x33, 0x1A, 0xC1, 0x5C, 0x17, 0x06, 0x95, 0x78, 0x9B, 0x12, 0x89, 0x34, 0xBF, 0x3E
];
const ubyte[] ServerK2 = cast(ubyte[])[
	0x62, 0x4F, 0xE8, 0x15, 0xDE, 0xEB, 0x04, 0x91, 0x1A, 0xC7, 0xE0, 0x4D, 0x16, 0xE3, 0x7C, 0x49,
	0xD2, 0x3F, 0xD8, 0x85, 0x4E, 0xDB, 0xF4, 0x01, 0x8A, 0xB7, 0xD0, 0xBD, 0x86, 0xD3, 0x6C, 0xB9,
	0x42, 0x2F, 0xC8, 0xF5, 0xBE, 0xCB, 0xE4, 0x71, 0xFA, 0xA7, 0xC0, 0x2D, 0xF6, 0xC3, 0x5C, 0x29,
	0xB2, 0x1F, 0xB8, 0x65, 0x2E, 0xBB, 0xD4, 0xE1, 0x6A, 0x97, 0xB0, 0x9D, 0x66, 0xB3, 0x4C, 0x99,
	0x22, 0x0F, 0xA8, 0xD5, 0x9E, 0xAB, 0xC4, 0x51, 0xDA, 0x87, 0xA0, 0x0D, 0xD6, 0xA3, 0x3C, 0x09,
	0x92, 0xFF, 0x98, 0x45, 0x0E, 0x9B, 0xB4, 0xC1, 0x4A, 0x77, 0x90, 0x7D, 0x46, 0x93, 0x2C, 0x79,
	0x02, 0xEF, 0x88, 0xB5, 0x7E, 0x8B, 0xA4, 0x31, 0xBA, 0x67, 0x80, 0xED, 0xB6, 0x83, 0x1C, 0xE9,
	0x72, 0xDF, 0x78, 0x25, 0xEE, 0x7B, 0x94, 0xA1, 0x2A, 0x57, 0x70, 0x5D, 0x26, 0x73, 0x0C, 0x59,
	0xE2, 0xCF, 0x68, 0x95, 0x5E, 0x6B, 0x84, 0x11, 0x9A, 0x47, 0x60, 0xCD, 0x96, 0x63, 0xFC, 0xC9,
	0x52, 0xBF, 0x58, 0x05, 0xCE, 0x5B, 0x74, 0x81, 0x0A, 0x37, 0x50, 0x3D, 0x06, 0x53, 0xEC, 0x39,
	0xC2, 0xAF, 0x48, 0x75, 0x3E, 0x4B, 0x64, 0xF1, 0x7A, 0x27, 0x40, 0xAD, 0x76, 0x43, 0xDC, 0xA9,
	0x32, 0x9F, 0x38, 0xE5, 0xAE, 0x3B, 0x54, 0x61, 0xEA, 0x17, 0x30, 0x1D, 0xE6, 0x33, 0xCC, 0x19,
	0xA2, 0x8F, 0x28, 0x55, 0x1E, 0x2B, 0x44, 0xD1, 0x5A, 0x07, 0x20, 0x8D, 0x56, 0x23, 0xBC, 0x89,
	0x12, 0x7F, 0x18, 0xC5, 0x8E, 0x1B, 0x34, 0x41, 0xCA, 0xF7, 0x10, 0xFD, 0xC6, 0x13, 0xAC, 0xF9,
	0x82, 0x6F, 0x08, 0x35, 0xFE, 0x0B, 0x24, 0xB1, 0x3A, 0xE7, 0x00, 0x6D, 0x36, 0x03, 0x9C, 0x69,
	0xF2, 0x5F, 0xF8, 0xA5, 0x6E, 0xFB, 0x14, 0x21, 0xAA, 0xD7, 0xF0, 0xDD, 0xA6, 0xF3, 0x8C, 0xD9
];
	private short logFC1, logFC2, pOutCount = 0;
	public ubyte[] doDecrypt(ubyte[] data, int len) {
	for (int i = 0; i < len; i++) {
         int a = (data[i] & 0xFF) ^ 0xAB;
         a = ((a & 0x0F) << 4) + ((a & 0xF0) >> 4);
         data[i] = cast(ubyte)((a ^ (ServerK2[logFC2] & 0xff)) ^ (ServerK1[logFC1++] & 0xff));
         if (logFC1 > 255) {
             logFC1 = 0;
             if (++logFC2 > 255) {
                 logFC2 = 0;
             }
         }
     }
	return data;
}
	public ubyte[] doEncrypt(ubyte[] data, int len) {
		for (short i = 0; i < len; i++)
		{
			data[i] = cast(ubyte)(data[i] ^ 0xab);
			data[i] = ((data[i] << 4) & 0xf0) | ((data[i] >> 4) & 0x0f);
			data[i] = (ServerK2[pOutCount >> 8] ^ data[i]);
			data[i] = (ServerK1[pOutCount & 0x00ff] ^ data[i]);
			pOutCount++;
			if ((pOutCount & 0x00ff) == 0x90)
			{
				pOutCount += 0x100;
				pOutCount &= 0xff00;
				if ((pOutCount >> 8) == 0x90)
				{
					pOutCount = 0;
				}
			}
		}
		return data;
	}
}
public class rc5Encryption {
	private uint[4] _bufKey;
	private uint[26] _bufSub;
	this(ubyte[] data) {
		const uint p32 = 0xB7E15163;
        const uint q32 = 0x61C88647;
        uint offsetA = 0, offsetB = 0, A = 0, B = 0;
        for (int i = 0; i < 4; i++) {
            _bufKey[i] = cast(uint)(data[i * 4] + (data[i * 4 + 1] << 8) + (data[i * 4 + 2] << 16) + (data[i * 4 + 3] << 24));
        }
        _bufSub[0] = p32;
        for (int i = 1; i < 26; i++)
        {
            _bufSub[i] = _bufSub[i - 1] - q32;
        }
        for (int s = 1; s <= 78; s++)
        {
            _bufSub[offsetA] = LeftRotate(_bufSub[offsetA] + A + B, 3);
            A = _bufSub[offsetA];
            offsetA = (offsetA + 1) % 0x1A;
            _bufKey[offsetB] = LeftRotate(_bufKey[offsetB] + A + B, cast(int)(A + B));
            B = _bufKey[offsetB];
            offsetB = (offsetB + 1) % 4;
        }
	}
	ubyte[] rc5Decrypt(ubyte[] data) {
        int nLen = cast(int)data.length;
        uint[] bufData = new uint[data.length / 4];
            for (int i = 0; i < data.length / 4; i++)
                bufData[i] = cast(uint)(data[i * 4] + (data[i * 4 + 1] << 8) + (data[i * 4 + 2] << 16) + (data[i * 4 + 3] << 24));
            for (int i = 0; i < nLen / 8; i++)
            {
                uint ld = bufData[2 * i];
                uint rd = bufData[2 * i + 1];
                for (int j = 12; j >= 1; j--)
                {
                    rd = RightRotate((rd - _bufSub[2 * j + 1]), cast(int)ld) ^ ld;
                    ld = RightRotate((ld - _bufSub[2 * j]), cast(int)rd) ^ rd;
                }
                uint B = rd - _bufSub[1];
                uint A = ld - _bufSub[0];
                bufData[2 * i] = A;
                bufData[2 * i + 1] = B;
            }
            ubyte[] result = new ubyte[bufData.length * 4];
            for (int i = 0; i < bufData.length; i++)
            {
                result[i * 4] = cast(ubyte)bufData[i];
                result[i * 4 + 1] = cast(ubyte)(bufData[i] >> 8);
                result[i * 4 + 2] = cast(ubyte)(bufData[i] >> 16);
                result[i * 4 + 3] = cast(ubyte)(bufData[i] >> 24);
            }
            return result;
	}
	uint LeftRotate(uint dwVar, uint dwOffset)
    {
        return (dwVar << (dwOffset & 0x1F) | dwVar >> 0x20 - (dwOffset & 0x1F));
    }

    uint RightRotate(uint dwVar, uint dwOffset)
    {
        return (dwVar >> (dwOffset & 0x1F) | dwVar << 0x20 - (dwOffset & 0x1F));
    }
}
public class ConquerPasswordCryptographer
    {
    	private int state;
        private ubyte[] key;
        private static ubyte[] scanCodeToVirtualKeyMap = cast(ubyte[])[ 
            0, 0x1b, 0x31, 50, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0xbd, 0xbb, 8, 9, 
            0x51, 0x57, 0x45, 0x52, 0x54, 0x59, 0x55, 0x49, 0x4f, 80, 0xdb, 0xdd, 13, 0x11, 0x41, 0x53, 
            0x44, 70, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0xba, 0xc0, 0xdf, 0x10, 0xde, 90, 0x58, 0x43, 0x56, 
            0x42, 0x4e, 0x4d, 0xbc, 190, 0xbf, 0x10, 0x6a, 0x12, 0x20, 20, 0x70, 0x71, 0x72, 0x73, 0x74, 
            0x75, 0x76, 0x77, 120, 0x79, 0x90, 0x91, 0x24, 0x26, 0x21, 0x6d, 0x25, 12, 0x27, 0x6b, 0x23, 
            40, 0x22, 0x2d, 0x2e, 0x2c, 0, 220, 0x7a, 0x7b, 12, 0xee, 0xf1, 0xea, 0xf9, 0xf5, 0xf3, 
            0, 0, 0xfb, 0x2f, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 130, 0x83, 0x84, 0x85, 0x86, 0xed, 
            0, 0xe9, 0, 0xc1, 0, 0, 0x87, 0, 0, 0, 0, 0xeb, 9, 0, 0xc2, 0
         ];
        private static ubyte[] virtualKeyToScanCodeMap = cast(ubyte[])[ 
            0, 0, 0, 70, 0, 0, 0, 0, 14, 15, 0, 0, 0x4c, 0x1c, 0, 0, 
            0x2a, 0x1d, 0x38, 0, 0x3a, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
            0x39, 0x49, 0x51, 0x4f, 0x47, 0x4b, 0x48, 0x4d, 80, 0, 0, 0, 0x54, 0x52, 0x53, 0x63, 
            11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 
            0, 30, 0x30, 0x2e, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 50, 0x31, 0x18, 
            0x19, 0x10, 0x13, 0x1f, 20, 0x16, 0x2f, 0x11, 0x2d, 0x15, 0x2c, 0x5b, 0x5c, 0x5d, 0, 0x5f, 
            0x52, 0x4f, 80, 0x51, 0x4b, 0x4c, 0x4d, 0x47, 0x48, 0x49, 0x37, 0x4e, 0, 0x4a, 0x53, 0x35, 
            0x3b, 60, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58, 100, 0x65, 0x66, 0x67, 
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x76, 0, 0, 0, 0, 0, 0, 0, 0, 
            0x45, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0x2a, 0x36, 0x1d, 0x1d, 0x38, 0x38, 0x6a, 0x69, 0x67, 0x68, 0x65, 0x66, 50, 0x20, 0x2e, 0x30, 
            0x19, 0x10, 0x24, 0x22, 0x6c, 0x6d, 0x6b, 0x21, 0, 0, 0x27, 13, 0x33, 12, 0x34, 0x35, 
            40, 0x73, 0x7e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1a, 0x56, 0x1b, 0x2b, 0x29, 
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0x71, 0x5c, 0x7b, 0, 0x6f, 90, 0, 
            0, 0x5b, 0, 0x5f, 0, 0x5e, 0, 0, 0, 0x5d, 0, 0x62, 0, 0, 0, 0
         ];

        this(string account)
        {
        	this.key = new ubyte[0x200];
            int seed = 0;
            for(int i=0; i<16; i++) {
            	seed += account[i];
            }
            //msvcrt.msvcrt.srand(seed);
            windows_srand(seed);
            ubyte[] buffer = new ubyte[0x10];
            for (int i = 0; i < 0x10; i++)
            {
				//int val = msvcrt.msvcrt.rand(); //TODO CHANGE TO WINDOWS_RAND
				int val = windows_rand();
                buffer[i] = cast(ubyte)val;
            }
            for (int j = 1; j < 0x100; j++)
            {
                this.key[j * 2] = cast(ubyte)j;
                this.key[(j * 2) + 1] = cast(ubyte)(j ^ buffer[j & 15]);
            }
            for (int k = 1; k < 0x100; k++)
            {
                for (int m = 1 + k; m < 0x100; m++)
                {
                    if (this.key[(k * 2) + 1] < this.key[(m * 2) + 1])
                    {
                        this.key[k * 2] = cast(ubyte)(this.key[k * 2] ^ this.key[m * 2]);
                        this.key[m * 2] = cast(ubyte)(this.key[m * 2] ^ this.key[k * 2]);
                        this.key[k * 2] = cast(ubyte)(this.key[k * 2] ^ this.key[m * 2]);
                        this.key[(k * 2) + 1] = cast(ubyte)(this.key[(k * 2) + 1] ^ this.key[(m * 2) + 1]);
                        this.key[(m * 2) + 1] = cast(ubyte)(this.key[(m * 2) + 1] ^ this.key[(k * 2) + 1]);
                        this.key[(k * 2) + 1] = cast(ubyte)(this.key[(k * 2) + 1] ^ this.key[(m * 2) + 1]);
                    }
                }
            }
        }
        
        private void windows_srand(int st) {
		state = st;
		}
        
		private int windows_rand() {
			return (((state = cast(int)(state * 214013L + 2531011L))>>16) & 0x7fff);
		}
        public ubyte[] Decrypt(ubyte[] data, int length)
        {
            ubyte[] buffer = new ubyte[length];
            for (int i = 0; i < length; i++)
            {
                bool flag = false;
                if (data[i] == 0)
                {
                    return buffer;
                }
                ubyte pos = cast(ubyte)(data[i] * 2); 
                ubyte index = this.key[data[i] * 2];
                if (index >= 0x80)
                {
                    index = cast(ubyte)(this.key[data[i] * 2] - 0x80);
                    flag = true;
                }
                buffer[i] = cast(ubyte)(buffer[i] + scanCodeToVirtualKeyMap[index]);
                if ((!flag && (buffer[i] >= 0x41)) && (buffer[i] <= 90))
                {
                    buffer[i] = cast(ubyte)(buffer[i] + 0x20);
                }
            }
            return buffer;
        }
    }